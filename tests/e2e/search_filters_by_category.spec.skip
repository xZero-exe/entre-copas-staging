import { test, expect } from '@playwright/test';
import { parseCurrency } from './helpers/utils';

async function gotoCategory(page, id = 354) {
  await page.goto(`/index.php?controller=category&id_category=${id}`, { waitUntil: 'domcontentloaded' });
  // Aceptar cookies si aparece
  const cookies = page.getByRole('button', { name: /aceptar|accept|ok|entendido/i });
  if (await cookies.isVisible().catch(() => false)) await cookies.click().catch(() => {});
}

async function gridCount(page) {
  const items = page.locator('.product-miniature, article.product, .js-product-miniature');
  return items.count();
}

test.setTimeout(120_000);

test('Categoría: hay filtros (Faceted Search) visibles', async ({ page }) => {
  await gotoCategory(page, 354);
  const filters = page.locator('.faceted-search, #search_filters, .js-search-filters');
  await expect(filters.first()).toBeVisible({ timeout: 15000 });
});

test('Categoría: orden por precio ascendente', async ({ page }) => {
  await gotoCategory(page, 354);

  const sortSelect = page.locator('select[name*="order"], select[name*="sort"], .js-sort-by');
  const hasSelect = await sortSelect.count();
  if (hasSelect) {
    await sortSelect.first().selectOption({ label: /precio.*asc|price.*low|menor.*mayor/i }).catch(async () => {
      // fallback: por value
      const options = sortSelect.first().locator('option');
      const n = await options.count();
      for (let i = 0; i < n; i++) {
        const t = (await options.nth(i).textContent() || '').trim();
        if (/precio.*asc|price.*low|menor.*mayor/i.test(t)) {
          const v = await options.nth(i).getAttribute('value');
          if (v) { await sortSelect.first().selectOption(v); break; }
        }
      }
    });
    await page.waitForLoadState('networkidle');
  } else {
    // Menú alternativo
    const menu = page.getByRole('button', { name: /ordenar|sort/i });
    if (await menu.isVisible().catch(() => false)) {
      await menu.click();
      const item = page.getByRole('menuitem', { name: /precio.*asc|price.*low|menor.*mayor/i });
      if (await item.isVisible().catch(() => false)) {
        await item.click();
        await page.waitForLoadState('networkidle');
      } else {
        test.skip(true, 'No encontré opción de orden Precio ascendente.');
      }
    } else {
      test.skip(true, 'No hay control de orden visible.');
    }
  }

  const cards = page.locator('.product-miniature, article.product, .js-product-miniature');
  const priceSel = '.price, [itemprop="price"]';
  const count = await cards.count();
  if (count < 2) test.skip(true, 'No hay suficientes productos para comprobar el orden.');

  const firstText = (await cards.nth(0).locator(priceSel).first().textContent() || '').trim();
  const lastText  = (await cards.nth(count - 1).locator(priceSel).first().textContent() || '').trim();
  const first = parseCurrency(firstText);
  const last  = parseCurrency(lastText);
  if (!Number.isFinite(first) || !Number.isFinite(last)) test.skip(true, 'No pude leer precios en grilla.');
  expect(first).toBeLessThanOrEqual(last);
});

test('Categoría: paginación a página 2 muestra resultados', async ({ page }) => {
  await gotoCategory(page, 354);
  // Solo si existe link a "2"
  const link2 = page.locator('.pagination a', { hasText: /^2$/ }).first();
  if (!(await link2.isVisible().catch(() => false))) test.skip(true, 'No hay página 2.');
  await link2.click();
  await page.waitForLoadState('networkidle');
  expect(await gridCount(page)).resolves.toBeGreaterThan(0);
});

test('Categoría: aplicar el primer filtro actualiza resultados', async ({ page }) => {
  await gotoCategory(page, 354);
  const before = await gridCount(page);
  if (before === 0) test.skip(true, 'Sin productos en categoría.');
  const facetCheckbox = page.locator(
    '.faceted-search input[type="checkbox"]:not(:disabled), ' +
    '#search_filters input[type="checkbox"]:not(:disabled), ' +
    '.js-search-filters input[type="checkbox"]:not(:disabled)'
  ).first();
  if (!(await facetCheckbox.isVisible().catch(() => false))) test.skip(true, 'No hay facetas clicables.');
  await facetCheckbox.check().catch(async () => { await facetCheckbox.click(); });
  await page.waitForLoadState('networkidle');
  const after = await gridCount(page);
  expect(after).toBeGreaterThan(0);
});
